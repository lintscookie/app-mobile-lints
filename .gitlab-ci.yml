# variables:
#   SAST_IMAGE_SUFFIX: '-fips'

include:
  - template: Jobs/SAST.gitlab-ci.yml


stages:
  - build
  - security
  - test
  - deploy
  - notify

build:
  image: docker:20.10.16
  stage: build
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_BUILDKIT: 1
    BUILDKIT_INLINE_CACHE: 1
  before_script:
    - docker info
    - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .docker_cache/
  script:
    - mkdir -p .docker_cache
    - docker build --cache-from=$DOCKER_IMAGE:cache -t $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker tag $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA $DOCKER_IMAGE:cache
    - docker push $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $DOCKER_IMAGE:cache
  only:
    - main
    - development
    - merge_requests


sast:
  stage: security
  artifacts:
    reports:
      sast: gl-sast-report.json 
    paths:
      - gl-sast-report.json     
    expire_in: 1 week    


unit-tests:
  stage: test
  image: golang:1.21
  script:
    - echo "Testing with Go ${GO_VERSION} on ${OS} with ${DATABASE}"
    - go mod download
    - go test ./tests/unit/... -v
  allow_failure: true
  only:
    - main
    - merge_requests
    - development

integration-tests:
  stage: test
  image: golang:1.21
  before_script:
    - go mod download
  script:
    - go test ./tests/integration/... -v
  only:
    - merge_requests
    - main
    - development

e2e-tests:
  stage: test
  needs:
    - build
  image: golang:1.21
  services:
    - name: $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA
      alias: app
  before_script:
    - go mod download
  script:
    - go test ./tests/e2e/... -v
  only:
    - development
    - main

deploy-dev:
  stage: deploy
  needs:
    - unit-tests
    - integration-tests
    - e2e-tests
  before_script:
    - echo $GCLOUD_SERVICE_KEY > service-account.json
    - gcloud auth activate-service-account --key-file service-account.json
    - gcloud config set project $GCP_PROJECT_ID
  image: google/cloud-sdk:stable
  script:
    - gcloud run deploy $SERVICE_NAME_DEV --image $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA --region asia-southeast2 --allow-unauthenticated
  after_script:
    - curl -s -X POST https://api.telegram.org/bot${BOT_TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d text="Deploy development"
  only:
    - development


deploy-prod:
  stage: deploy
  needs:
    - unit-tests
    - integration-tests
    - e2e-tests
  before_script:
    - echo $GCLOUD_SERVICE_KEY > service-account.json
    - gcloud auth activate-service-account --key-file service-account.json
    - gcloud config set project $GCP_PROJECT_ID
  image: google/cloud-sdk:stable
  script:
    - gcloud run deploy $SERVICE_NAME --image $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA --region asia-southeast2 --allow-unauthenticated
  after_script:
    - apt-get update && apt-get install -y curl
    - curl -s -X POST https://api.telegram.org/bot${BOT_TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d text="Deploy Production Started by:USER:${CI_COMMIT_AUTHOR}, COMMIT MESSAGE:${CI_COMMIT_MESSAGE}"
  only:
    - main

notify_telegram:
  stage: notify
  image: curlimages/curl:latest
  script:
    - curl -s -X POST https://api.telegram.org/bot${BOT_TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d text="Deploy berhasil! Pipeline:${CI_PIPELINE_URL}"
  when: on_success

notify_telegram_failure:
  stage: notify
  image: curlimages/curl:latest
  script:
    - curl -s -X POST https://api.telegram.org/bot${BOT_TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d text="Deploy failed! Pipeline:${CI_PIPELINE_URL}"
  when: on_failure